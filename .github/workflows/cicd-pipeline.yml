name: Full CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo "âœ… Connected to EC2"

            # Install Docker if not already installed (safe fallback)
            if ! command -v docker &> /dev/null
            then
              echo "Installing Docker..."
              sudo dnf install -y docker
              sudo systemctl enable --now docker
              sudo usermod -aG docker ec2-user
            fi

            # Log in to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            # Pull the latest image
            IMAGE_TAG=$(curl -s https://ghcr.io/v2/${{ github.repository }}/tags/list | jq -r '.tags[-1]')
            FULL_IMAGE="${{ env.IMAGE_NAME }}:$IMAGE_TAG"
            echo "Pulling $FULL_IMAGE"
            sudo docker pull $FULL_IMAGE

            # Stop & remove old container if it exists
            sudo docker stop my-app-container || true
            sudo docker rm my-app-container || true

            # Run new container
            sudo docker run -d --name my-app-container --restart always -p 3000:3000 $FULL_IMAGE

            # Optional cleanup
            sudo docker image prune -a -f
